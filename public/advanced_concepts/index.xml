<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced Concepts on CrossForge</title>
    <link>https://fartleako.github.io/advanced_concepts/</link>
    <description>Recent content in Advanced Concepts on CrossForge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Nov 2022 14:41:58 +0100</lastBuildDate><atom:link href="https://fartleako.github.io/advanced_concepts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Handling Input</title>
      <link>https://fartleako.github.io/advanced_concepts/input/</link>
      <pubDate>Tue, 01 Nov 2022 21:49:43 +0100</pubDate>
      
      <guid>https://fartleako.github.io/advanced_concepts/input/</guid>
      <description>The classes Keyboard and Mouse represent - as the names indicate - your basic input devices. They are part of the window and have all the standard keys and actions listed, while constantly checking their state which is received from the system automatically. Through the functions Keyboard::keyPressed(Key) and Mouse::buttonState(Button) you can check if the Key/Button is pressed.
You can use it like this:
//GLWindow pRenderWin; if (pRenderWin.keyboard()-&amp;gt;keyPressed(Keyboard::KEY_F9, true)) { function.toggle(); //just an example } The second argument is reset: setting it true will only let you toggle a function while being set to false (by default) you can also hold the key, which can be used for movement keys for example.</description>
    </item>
    
    <item>
      <title>Multi Viewport</title>
      <link>https://fartleako.github.io/advanced_concepts/multi_viewport/</link>
      <pubDate>Sun, 20 Nov 2022 12:00:39 +0100</pubDate>
      
      <guid>https://fartleako.github.io/advanced_concepts/multi_viewport/</guid>
      <description>When viewing your creations, normally one viewport is all you need, but if needed Crossforge also supports multiple Viewports. Mainly there are two ways of achieving multiple Viewports, the first way is by using one scenegraph and multiple virtual cameras, the second way is by using multiple scenegraphs with one camera setup.
1) Multiple scenegraphs First off we begin with the way of using multiple scenegraphs, but why would you want to use this way?</description>
    </item>
    
    <item>
      <title>PBS Material System</title>
      <link>https://fartleako.github.io/advanced_concepts/material_system/</link>
      <pubDate>Tue, 01 Nov 2022 21:49:43 +0100</pubDate>
      
      <guid>https://fartleako.github.io/advanced_concepts/material_system/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Shader System</title>
      <link>https://fartleako.github.io/advanced_concepts/shader/</link>
      <pubDate>Tue, 01 Nov 2022 21:49:43 +0100</pubDate>
      
      <guid>https://fartleako.github.io/advanced_concepts/shader/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Callback System</title>
      <link>https://fartleako.github.io/advanced_concepts/callback_system/</link>
      <pubDate>Tue, 01 Nov 2022 21:49:43 +0100</pubDate>
      
      <guid>https://fartleako.github.io/advanced_concepts/callback_system/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sockets</title>
      <link>https://fartleako.github.io/advanced_concepts/sockets/</link>
      <pubDate>Sun, 20 Nov 2022 12:01:37 +0100</pubDate>
      
      <guid>https://fartleako.github.io/advanced_concepts/sockets/</guid>
      <description>If you want to send or receive data through an network, one way of achieving this is by using a concept called sockets. In short sockets function as an endpoint of a local network.
For that we use UDP and TCP
UDP TCP UDP uses ports to allocate data to the correct program, so it is connectionless TCP establishes a connection between two end points of a network connection (sockets) Lets see the basics of how to setup sockets.</description>
    </item>
    
    <item>
      <title>Keeping Platform Independency </title>
      <link>https://fartleako.github.io/advanced_concepts/platform_independency/</link>
      <pubDate>Tue, 01 Nov 2022 21:49:43 +0100</pubDate>
      
      <guid>https://fartleako.github.io/advanced_concepts/platform_independency/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
